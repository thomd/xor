#!/usr/bin/env python

import sys
import os
import string

def convert(x):
    '''
    return tuple of (ascii, dec, hex, bin)
    '''
    if typ == 'ascii':
        return (x,                ord(x),      format(ord(x), '02x').upper(),     format(ord(x), '08b'))
    if typ == 'dec':
        return (chr(int(x)),      int(x),      format(int(x), '02x').upper(),     format(int(x), '08b'))
    if typ == 'hex':
        return (chr(int(x, 16)),  int(x, 16),  format(int(x, 16), '02x').upper(), format(int(x, 16), '08b'))
    if typ == 'bin':
        return (chr(int(x, 2)),   int(x, 2),   format(int(x, 2), '02x').upper(),  format(int(x, 2), '08b'))

args = sys.argv[1:]
typ = 'ascii'

if '-b' in args:
    typ = 'bin'
    args.remove('-b')

if '-d' in args:
    typ = 'dec'
    args.remove('-d')

if '-h' in args:
    typ = 'hex'
    args.remove('-h')

if len(args) == 0 or len(args) > 2:
    print('''
  \033[90mUSAGE\033[0m

     xor [-b] [-d] [-h] x1 x2

  \033[90mEXAMPLE\033[0m

     xor a W
     xor -d 97 201
     xor -h 61 A9
     xor -b 1001 11010100
    ''')
    sys.exit(1)

if typ == 'ascii':
    for arg in args:
        if arg != None and len(arg) != 1:
            print(f"\n \033[31m'{arg}' is not a valid single ASCII character\033[0m")
            sys.exit(1)

if typ == 'bin':
    for arg in args:
        if arg != None and (len(arg) > 8 or not all([b in '01' for b in arg])):
            print(f"\n \033[31m'{arg}' is not a valid single binary byte\033[0m")
            sys.exit(1)

if typ == 'dec':
    for arg in args:
        if arg != None and (not all([d in string.digits for d in arg]) or int(arg) < 0 or int(arg) > 255):
            print(f"\n \033[31m'{arg}' is not a valid single decimal number in [0, 255]\033[0m")
            sys.exit(1)

if typ == 'hex':
    for arg in args:
        if arg != None and (not all([d in string.hexdigits for d in arg]) or len(arg) > 2):
            print(f"\n \033[31m'{arg}' is not a valid single hexadecimal number\033[0m")
            sys.exit(1)

if len(args) == 1:
    a = b = convert(args[0])

if len(args) == 2:
    a = convert(args[0])
    b = convert(args[1])


# XOR Operation
x = a[1] ^ b[1]
c = (chr(int(x)), int(x), format(int(x), '02x').upper(), format(int(x), '08b'))

if 'DEBUG' in os.environ:
    print(a)
    print(b)
    print(c)

def p(s):
    return '\' \'' if s == ' ' else s if s in (string.ascii_letters + string.digits + string.punctuation) else '\u2B1A'

def l(x):
    return len(x) if type(x) == 'str' else len(str(x))

def m(a, b='', c=''):
    return '\u2014' * max(l(a), l(b), l(c))

def plus(s):
    return '\u2A01 ' + s

print('')
print(f'\033[90m{"ASCII":^18s}{"DEC":<11s}{"HEX":<11s}{"BIN"}\033[0m')
print('')
print(f'{p(a[0]):^18s}{str(a[1]):<11s}{a[2]:<11s}{a[3]}')
print(f'{plus(p(b[0])):^16s}{plus(str(b[1])):<11s}{plus(b[2]):<11s}{plus(b[3])}')
print(f'\033[90m{m(p(a[0]),p(b[0]),p(c[0])):^18s}{m(a[1],b[1],c[1]):<11s}{m(a[2],b[2],c[2]):<11s}{m(a[3])}\033[0m')
print(f'{p(c[0]):^18s}{c[1]:<11d}{c[2]:<11s}{c[3]}')

sys.exit(0)
